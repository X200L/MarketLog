import telebot
from telebot import types
import logging
import os
from datetime import datetime
from PIL import Image
from backend.main2 import starter
from cv import yanlog
from backend.yanlog import ImageProcessor
from flask import Flask, render_template, request, jsonify, send_from_directory, session, redirect
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = ''
app.config['TEMP_UPLOAD_FOLDER'] = 'temp_uploads'
bot_token = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(bot_token)
import threading
import threading
import queue

# –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
request_queue = queue.Queue()
processing_lock = threading.Lock()
current_processing = None


processing_lock = threading.Lock()
current_processing = None
user_in_queue = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏

def process_queue():
    global current_processing
    while True:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        task = request_queue.get()
        chat_id, shelf_size, op_x, op_y, img_path = task

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.send_message(chat_id, "üîî –í–∞—à –∑–∞–ø—Ä–æ—Å –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")

        # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π –∑–∞–ø—Ä–æ—Å
        with processing_lock:
            current_processing = chat_id
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
            if chat_id in user_in_queue:
                user_in_queue.remove(chat_id)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        try:
            build_grid(chat_id, shelf_size, op_x, op_y, img_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {chat_id}: {e}")
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        with processing_lock:
            current_processing = None

        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        request_queue.task_done()

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=process_queue, daemon=True).start()
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
build_grid_lock = threading.Lock()


def build_grid(chat_id, shelf_size, operation_zone_x, operation_zone_y, image_path):
    try:
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        filename = image_path.replace('\\', '/')
        robot_size = shelf_size
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)

        file_path = '/'.join(filename.split('/')[:-1])
        image_name = filename.split('/')[-1]

        processor = ImageProcessor(app.config['UPLOAD_FOLDER'])
        processed_filename = processor.process_file(file_path, image_name)
        processed_path = os.path.join(app.config['UPLOAD_FOLDER'], processed_filename)

        starter(
            processed_path,
            operation_zone_x,
            operation_zone_y,
            robot_size,
            chat_id,
            temp_upload_folder=app.config['TEMP_UPLOAD_FOLDER']
        )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        temp_dir = app.config['TEMP_UPLOAD_FOLDER']
        media_group = []
        sent_files = 0
        file_objects = []  # To keep track of open file objects

        try:
            for i in range(6):
                img_path = os.path.join(temp_dir, f'warehouse_roads{i}.png')
                if os.path.exists(img_path):
                    img_file = open(img_path, 'rb')  # Open the file
                    file_objects.append(img_file)  # Keep track of it

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    if i == 0:
                        media_group.append(types.InputMediaPhoto(img_file, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç —Å–∫–ª–∞–¥–∞\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X={operation_zone_x}, Y={operation_zone_y}\n–†–∞–∑–º–µ—Ä —Å—Ç–µ–ª–ª–∞–∂–∞: {shelf_size}"))

                    else:
                        media_group.append(types.InputMediaPhoto(img_file))

                    sent_files += 1

            if media_group:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                bot.send_media_group(chat_id, media_group)

                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if sent_files == 6:
                    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!", reply_markup=create_reply_keyboard())
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–æ—Ä–æ–≥.", reply_markup=create_reply_keyboard())
        finally:
            # Close all file objects when done
            for file_obj in file_objects:
                try:
                    file_obj.close()
                except:
                    pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ build_grid: {e}")
        with processing_lock:
            if chat_id in user_in_queue:
                user_in_queue.remove(chat_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.", reply_markup=create_reply_keyboard())
logger = logging.getLogger(__name__)



# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
UPLOAD_FOLDER = '../Mesher/outline_of_warehouse'
# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_image, –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º:



# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def create_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?')
    btn2 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–∫–ª–∞–¥–∞')
    btn3 = types.KeyboardButton('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É')
    btn4 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    markup.add(btn1, btn2, btn3, btn4)
    return markup
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    user_states[message.chat.id] = {
        'waiting_for_image': False,
        'waiting_for_coords': False,
        'waiting_for_shelf_size': False
    }
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–∫–ª–∞–¥–∞.",
        reply_markup=create_reply_keyboard()
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã')
def send_example_file(message):
    try:
        chat_id = message.chat.id
        example_dir = 'Example'

        # –ü—Ä–∏–º–µ—Ä 1
        example_file1 = 'Zavod3.png'
        example_path1 = os.path.join(example_dir, example_file1)
        # –ü—Ä–∏–º–µ—Ä 2
        example_file2 = 'Zavod2.png'
        example_path2 = os.path.join(example_dir, example_file2)

        if not os.path.exists(example_path1) or not os.path.exists(example_path2):
            bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_reply_keyboard())
            return



        markup2 = types.InlineKeyboardMarkup()
        btn_use2 = types.InlineKeyboardButton(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä",
            callback_data=f"use_example:{example_file2}:500:500:20"
        )
        markup2.add(btn_use2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏


        with open(example_path2, 'rb') as file:
            bot.send_photo(
                chat_id,
                file,
                caption="–ü—Ä–∏–º–µ—Ä —Å–∫–ª–∞–¥–∞: X=500, Y=500, –†–∞–∑–º–µ—Ä —Å—Ç–µ–ª–ª–∞–∂–∞=20",
                reply_markup=markup2
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤", reply_markup=create_reply_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('use_example'))
def handle_use_example(call):
    try:
        chat_id = call.message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        with processing_lock:
            if chat_id in user_in_queue or chat_id == current_processing:
                bot.answer_callback_query(
                    call.id,
                    "‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                    show_alert=True
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö
            user_in_queue.add(chat_id)

        _, filename, op_x, op_y, shelf_size = call.data.split(':')

        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∏–º–µ—Ä–∞
        example_path = os.path.join('Example', filename)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        png_path = convert_to_png(example_path)

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
        new_filename = f"example_{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        new_path = os.path.join(UPLOAD_FOLDER, new_filename)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(new_path), exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        with open(png_path, 'rb') as src, open(new_path, 'wb') as dst:
            dst.write(src.read())

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        request_queue.put((chat_id, int(shelf_size), int(op_x), int(op_y), new_path))

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏!")

        # –°–æ–æ–±—â–∞–µ–º –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        with processing_lock:
            queue_size = request_queue.qsize()
            if current_processing:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º queue_size-1, —Ç–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                position = max(1, queue_size - 1)
                bot.send_message(
                    chat_id,
                    f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                    f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {position}"
                )
            else:
                bot.send_message(chat_id, "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
        with processing_lock:
            if chat_id in user_in_queue:
                user_in_queue.remove(chat_id)
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ—Ä–∞!")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—Ä–∞")

def convert_to_png(image_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å –Ω–æ–≤—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(image_path)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png
        png_path = os.path.splitext(image_path)[0] + '.png'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
        img.save(png_path, 'PNG')

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ PNG
        if not image_path.lower().endswith('.png'):
            os.remove(image_path)

        return png_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PNG: {e}")
        return image_path


@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('waiting_for_coords', False))
def handle_coords_input(message):
    chat_id = message.chat.id
    coords = message.text.strip()

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        coord_parts = [part.strip() for part in coords.split(',')]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å —Ä–æ–≤–Ω–æ 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ–Ω–∏ —á–∏—Å–ª–∞
        if len(coord_parts) != 2 or not all(part.isdigit() for part in coord_parts):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
        operation_zone_x = int(coord_parts[0])
        operation_zone_y = int(coord_parts[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        if operation_zone_x < 0 or operation_zone_y < 0:
            raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        user_states[chat_id]['operation_zone_x'] = operation_zone_x
        user_states[chat_id]['operation_zone_y'] = operation_zone_y
        user_states[chat_id]['waiting_for_coords'] = False
        user_states[chat_id]['waiting_for_shelf_size'] = True

        bot.send_message(
            chat_id,
            "‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–ª–ª–∞–∂–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–æ–¥–Ω–æ —á–∏—Å–ª–æ):",
            reply_markup=types.ReplyKeyboardRemove(selective=True)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_coords = True
        user_states[chat_id]['waiting_for_coords'] = True

        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>X,Y</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>100,200</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n"
            "2. –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞\n"
            "3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_coords = True
        user_states[chat_id]['waiting_for_coords'] = True

        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>X,Y</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>100,200</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n"
            "2. –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞\n"
            "3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ",
            parse_mode='HTML'
        )

@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–∫–ª–∞–¥–∞')
def request_image(message):
    user_states[message.chat.id] = {
        'waiting_for_image': True,
        'waiting_for_coords': False,
        'waiting_for_shelf_size': False
    }
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG:",
        reply_markup=types.ReplyKeyboardRemove(selective=True)
    )

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@bot.message_handler(content_types=['photo', 'document'])
def handle_image(message):
    try:
        chat_id = message.chat.id

        if not user_states.get(chat_id, {}).get('waiting_for_image', False):
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–∫–ª–∞–¥–∞' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                         reply_markup=create_reply_keyboard())
            return

        file_info = None
        file_name = ""
        file_extension = ""

        if message.photo:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_extension = "jpg"
            file_name = f"Topology_{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{file_extension}"


        elif message.document:
            if not allowed_file(message.document.file_name):
                bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.")
                return
            file_info = bot.get_file(message.document.file_id)
            file_extension = message.document.file_name.split('.')[-1].lower()
            file_name = f"Topology_{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{file_extension}"

        if file_info:
            downloaded_file = bot.download_file(file_info.file_path)
            temp_file_path = os.path.join(UPLOAD_FOLDER, file_name)

            os.makedirs(os.path.dirname(temp_file_path), exist_ok=True)

            with open(temp_file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
             # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            png_file_path = convert_to_png(temp_file_path)

            user_states[chat_id] = {
                'waiting_for_image': False,
                'waiting_for_coords': True,
                'waiting_for_shelf_size': False,
                'image_path': png_file_path
            }
            user_states[chat_id]['last_uploaded_file'] = png_file_path  # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –§–ê–ô–õ –¢–û–õ–¨–ö–û –ß–¢–û –û–¢–ø—Ä–∞–≤–ª–ï–ù–ù–´–ô




            bot.reply_to(
                message,
                "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "X1,Y1\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 100,200 ",

                reply_markup=types.ReplyKeyboardRemove(selective=True)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {png_file_path}")
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=create_reply_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                     reply_markup=create_reply_keyboard())


@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('waiting_for_shelf_size', False))
def handle_shelf_size_input(message):
    try:
        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        with processing_lock:
            if chat_id in user_in_queue or chat_id == current_processing:
                bot.send_message(
                    chat_id,
                    "‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö
            user_in_queue.add(chat_id)

        try:
            shelf_size = int(message.text.strip())
            user_states[chat_id]['shelf_size'] = shelf_size
            user_states[chat_id]['waiting_for_shelf_size'] = False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            image_path = user_states[chat_id]['image_path']
            operation_zone_x = user_states[chat_id]['operation_zone_x']
            operation_zone_y = user_states[chat_id]['operation_zone_y']

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
            request_queue.put((chat_id, shelf_size, operation_zone_x, operation_zone_y, image_path))

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å
            with processing_lock:
                queue_size = request_queue.qsize()
                if current_processing:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º queue_size-1, —Ç–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    position = max(1, queue_size - 1)
                    bot.send_message(
                        chat_id,
                        f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                        f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {position}"
                    )
                else:
                    bot.send_message(chat_id, "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ...")

        except ValueError:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞")
        except Exception as e:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    except ValueError as e:
        with processing_lock:
            if chat_id in user_in_queue:
                user_in_queue.remove(chat_id)
        bot.reply_to(
            message,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ (—Ä–∞–∑–º–µ—Ä —Å—Ç–µ–ª–ª–∞–∂–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö)."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–ª–ª–∞–∂–∞: {e}")
        with processing_lock:
            if chat_id in user_in_queue:
                user_in_queue.remove(chat_id)
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
@bot.message_handler(func=lambda message: message.text in ['–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?', '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É'])
def handle_hints(message):
    if message.text == '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?':
        response = """–Ø - –±–æ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞. –Ø –ø—Ä–∏–Ω–∏–º–∞—é –∏ —Å–æ–∑–¥–∞—é —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–∫–ª–∞–¥–∞ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞."""
    elif message.text == '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É':
        response = """–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:
- –§–æ—Ä–º–∞—Ç: JPG –∏–ª–∏ PNG (–±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ PNG)
- –†–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 10 –ú–ë
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1280x720
- –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏"""

    bot.send_message(message.chat.id, response, reply_markup=create_reply_keyboard())


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)

